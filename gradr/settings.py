"""
Django settings for gradr project.

Generated by 'django-admin startproject' using Django 3.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/

"""


from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/



# SECURITY WARNING: keep the secret key used in production secret!

# SECRET_KEY = 'django-insecure-&ikxv*q$)0=5-lgw!=wm9durn358d^)673r3!4f%5%#ct0pirg'


# setting for digital ocean deployment
# code to generate secret key 
# python -c 'from django.core.management import utils; print(utils.get_random_secret_key())'
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY','django-insecure-&ikxv*q$)0=5-lgw!=wm9durn358d^)673r3!4f%5%#ct0pirg')

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True
# 1 means in DEBUG MODE
DEBUG = str(os.environ.get('DEBUG')) == "1" 


# FOR APP PLATFORM DEPLOYMENT
ALLOWED_HOSTS = []
if not DEBUG:
    ALLOWED_HOSTS +=[os.environ.get('DJANGO_ALLOWED_HOST')]

# AUTH_USER_MODEL = 'accounts.User'
# AUTH_USER_MODEL = 'auth.User'


# Application definition
INSTALLED_APPS = [
    'accounts.apps.AccountsConfig',
    'administrator.apps.AdministratorConfig',
    'teacher.apps.TeacherConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
     # configure white noise for deployment
    'whitenoise.middleware.WhiteNoiseMiddleware'
]

ROOT_URLCONF = 'gradr.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'gradr.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases




DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME':'gradrly',
        'USER': 'postgres',
        'PASSWORD':'2021_lonax',
        'HOST':'localhost',
    }
}

# settings for database deployment on app platform
# These will be used only in production
POSTGRES_DB = os.environ.get("POSTGRES_DB")
POSTGRES_PASSWORD= os.environ.get("POSTGRES_PASSWORD")
POSTGRES_USER= os.environ.get("POSTGRES_USER")
POSTGRES_HOST= os.environ.get("POSTGRES_HOST")
POSTGRES_PORT= os.environ.get("POSTGRES_PORT")

POSTGRES_READY=(
    POSTGRES_DB is not None
    and POSTGRES_PASSWORD is not None
    and POSTGRES_USER is not None
    and POSTGRES_HOST is not None
    and POSTGRES_PORT is not None
)

if POSTGRES_READY:
    DATABASES={
        "default":{
         'ENGINE':'django.db.backends.postgresql',
         'NAME':POSTGRES_DB,
         'USER': POSTGRES_DB,
         'PASSWORD':POSTGRES_PASSWORD,
         'HOST':POSTGRES_HOST,
         'PORT':POSTGRES_PORT,
        }
    }

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

# commented out
# STATIC_ROOT= os.path.join(BASE_DIR,'static')
# STATIC_URL = '/static/'
# STATICFILES_DIRS=[
#     os.path.join(BASE_DIR,'gradr/static')
# ]

# updated settings
STATIC_URL = '/static/'
STATIC_ROOT = Path(BASE_DIR).joinpath('staticfiles')
STATICFILES_DIRS = (Path(BASE_DIR).joinpath('static'),)

# configure static files for digital ocean app platform deployment

STATICFILES_STORAGE ='whitenoise.storage.CompressedManifestStaticFilesStorage'

# configure media root for storing images
# MEDIA_ROOT = os.path.join(BASE_DIR, 'static/images')
# MEDIA_URL = '/images/'
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')



# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
